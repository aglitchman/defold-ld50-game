local flow = require("ludobits.m.flow")
local pointer = require("pointer_lock.pointer")
local render3d = require("scene3d.render.render3d")
local system_util = require("scene3d.helpers.system_util")
local main = require("ld50.main")
local global_state = require("ld50.scripts.global_state")

go.property("scene1", hash("getaway"))
go.property("scene2", hash(""))
go.property("scene3", hash(""))
go.property("scene4", hash(""))
go.property("scene5", hash(""))

go.property("resources_url", msg.url("#resources"))

go.property("acquire_input_focus", true)

function init(self)
    if self.acquire_input_focus then
        msg.post(".", hash("acquire_input_focus"))
    end

    system_util.setup_error_handling()
    window.set_listener(main.window_callback)

    -- Resize game window on desktop platforms
    system_util.resize_window()

    -- Set Pointer Lock's virtual cursor invisible by default
    pointer.cursor_visible = false

    -- Show FPS
    render3d.show_fps = true

    -- Init math.random
    math.randomseed(100000 * (socket.gettime() % 1))

    print("Loading the first scene", self.scene1)
    main.load_scene(self, self.scene1)
end

function final(self)
    flow.stop()
end

function update(self, dt)
    if self.pause_proxy then
        self.pause_proxy = false
        msg.post(self.loaded_proxy, "disable")
    elseif self.unpause_proxy then
        self.unpause_proxy = false
        msg.post(self.loaded_proxy, "enable")
    end

    render3d.debug_log("[5] Restart")
    render3d.debug_log("[6] Next")

    if pointer.locked then
        render3d.debug_log("[Esc] Unlock mouse")
    end

    -- Check the engine_template.html file
    -- Pre-1.3.1 workaround for vsync=1
    if html5 then
        html5.run("Module.__fixedUpdateSupportFunc && Module.__fixedUpdateSupportFunc()")
    end
end

function on_message(self, message_id, message, sender)
    flow.on_message(message_id, message, sender)

    if message_id == hash("load_scene") then
        main.load_scene(self, message.id)
    elseif message_id == hash("reload_scene") then
        -- Reload current scene
        main.load_scene(self)
    end
end

function on_input(self, action_id, action)
    flow.on_input(action_id, action)

    if action_id == hash("key_m") and action.pressed then
        global_state.music = not global_state.music
    elseif action_id == hash("key_1") and action.pressed then
        msg.post("@system:", "toggle_physics_debug")
    elseif action_id == hash("key_2") and action.pressed then
        msg.post("@system:", "toggle_profile")
    elseif action_id == hash("key_r") and action.pressed then
        -- Reload current scene
        main.load_scene(self)
    -- elseif action_id == hash("key_6") and action.pressed then
    --     -- Load next scene
    --     local next_id = self.scene1
    --     for i = 1, 100 do
    --         local s = self["scene" .. i]
    --         if s == nil or s == hash("") then
    --             break
    --         end
    --         if s == self.loaded_scene then
    --             local n = self["scene" .. (i + 1)]
    --             next_id = (n ~= hash("") and n) or next_id
    --             break
    --         end
    --     end
    --     print("Loading next scene", next_id)
    --     main.load_scene(self, next_id)
    elseif action_id == hash("key_f11") and action.pressed then
        defos.toggle_fullscreen()
    elseif action_id == hash("key_ralt") or action_id == hash("key_lalt") then
        if action.released then
            self.alt_is_held = false
        else
            self.alt_is_held = true
        end
    elseif self.alt_is_held and action_id == hash("key_enter") and action.pressed then
        defos.toggle_fullscreen()
    elseif self.alt_is_held and action_id == hash("key_f4") and action.pressed then
        msg.post("@system:", "exit", {code = 0})
    elseif action_id == hash("touch_multi") then
        global_state.touch_control = true
    end
end
