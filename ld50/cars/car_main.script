go.property("acceleration_const", 12)
go.property("acceleration_boost", 0)
go.property("start_velocity", vmath.vector3(0, 0, 0))
go.property("turn_speed1", 1)
go.property("turn_speed2", 10)
-- 250: DRIFT
-- 1000: RACE CAR
go.property("traction_const", 500)
go.property("acceleration_apply_point", vmath.vector3(0, -0.1, -1.8))

go.property("async_init", true)
go.property("debug_draw", false)
go.property("debug_info", false)

go.property("car_physics_id", hash("/cartoon_car_01/physics"))
go.property("car_physics_chassis_id", hash("collision"))
go.property("car_physics_wheel1_id", hash("/cartoon_car_01/physics_wheel_fl"))
go.property("car_physics_wheel2_id", hash("/cartoon_car_01/physics_wheel_fr"))
go.property("car_physics_wheel3_id", hash("/cartoon_car_01/physics_wheel_rl"))
go.property("car_physics_wheel4_id", hash("/cartoon_car_01/physics_wheel_rr"))
go.property("car_visuals_id", hash("/cartoon_car_01/visuals"))
go.property("car_visuals_body_id", hash("/cartoon_car_01/visuals_body"))
go.property("car_visuals_body_mesh_id", hash("mesh"))
go.property("car_visuals_wheel1_id", hash("/cartoon_car_01/visuals_wheel_fl"))
go.property("car_visuals_wheel2_id", hash("/cartoon_car_01/visuals_wheel_fr"))
go.property("car_visuals_wheel3_id", hash("/cartoon_car_01/visuals_wheel_rl"))
go.property("car_visuals_wheel4_id", hash("/cartoon_car_01/visuals_wheel_rr"))
go.property("car_visuals_wheel_mesh_id", hash("mesh"))

go.property("is_police", false)
go.property("car_visuals_siren_left_id", hash("/cartoon_car_01/visuals_siren_left"))
go.property("car_visuals_siren_right_id", hash("/cartoon_car_01/visuals_siren_right"))

go.property("is_player", false)
go.property("getaway_car_color", 1)
go.property("getaway_control_script", msg.url())
go.property("direction_correction", true)
go.property("direction_target", vmath.vector3(0, 0, -10))
go.property("direction_target_id", hash(""))
go.property("adaptive_cruise_control", false)
go.property("keyboard_input", false)
go.property("key_left", hash("key_a"))
go.property("key_right", hash("key_d"))
go.property("key_left2", hash("key_left"))
go.property("key_right2", hash("key_right"))
go.property("can_merge", false)

go.property("input_gas_pedal_value", 0)
go.property("input_steering_wheel_value", 0)

go.property("frustum_cull_enabled", true)
go.property("frustum_mesh_max_dimension", 4.7)

local math3d = require("scene3d.helpers.math3d")
local render3d = require("scene3d.render.render3d")
local frustum_mesh = require("scene3d.scripts.frustum_mesh")
local fx = require("ld50.fx.scripts.fx")
local level_state = require("ld50.scenes.getaway.level_state")
local cars = require("ld50.cars.cars")

local EMPTY_HASH = hash("")
local APPLY_FORCE = hash("apply_force")
local INIT = hash("init")
local SUSPENSION_UPDATE = hash("suspension_update")

local POSITION_Y = hash("position.y")
local EULER_X = hash("euler.x")
local EULER_Y = hash("euler.y")

local LINEAR_VELOCITY = hash("linear_velocity")
local ANGULAR_VELOCITY = hash("angular_velocity")
local LINEAR_DAMPING = hash("linear_damping")
local ANGULAR_DAMPING = hash("angular_damping")
local MASS = hash("mass")

local WHEEL_FL = 1
local WHEEL_FR = 2
local WHEEL_RL = 3
local WHEEL_RR = 4

local function any_true(arr)
    for _, v in ipairs(arr) do
        if v then
            return true
        end
    end
    return false
end

--- Rotate a collision object be applying opposing and offset forces
-- @param collisionobject_url
-- @param force In the format of vmath.vector3(0, force, 0)
local function apply_torque(collisionobject_url, force)
    local rotation = go.get_rotation()
    local world_position = go.get_world_position()
    local offset = 0.50
    msg.post(collisionobject_url, APPLY_FORCE, { force = vmath.rotate(rotation, force), position = world_position + vmath.rotate(rotation, vmath.vector3(-offset, 0, offset)) })
    msg.post(collisionobject_url, APPLY_FORCE, { force = vmath.rotate(rotation, -force), position = world_position + vmath.rotate(rotation, vmath.vector3(offset, 0, -offset)) })
end

local function correct_direction(self)
    local c = self.car_data

    local target_pos = c.car_position + self.direction_target
    if self.is_police and self.direction_target_id ~= EMPTY_HASH then
        target_pos = go.get_position(self.direction_target_id)
    end

    local car_yaw = 90 + math3d.euler_y(c.car_rotation)
    local target_yaw = math.deg(math.atan2(-(target_pos.z - c.car_position.z), target_pos.x - c.car_position.x))
    target_yaw = target_yaw - car_yaw
    if target_yaw <= -180 then
        target_yaw = target_yaw + 360
    end

    local sz = 1
    local sx = (target_yaw > 0 and -1 or 1) * math3d.clamp(math.abs(target_yaw) / 20, 0, 1)

    return sx
end

local function process_input(self, dt)
    local c = self.car_data

    local sz = 0
    local sx = 0

    self.no_input_time = self.no_input_time + dt

    if self.input_key_left or self.input_key_left2 then
        sx = sx - 1
        self.no_input_time = 0
    end
    if self.input_key_right or self.input_key_right2 then
        sx = sx + 1
        self.no_input_time = 0
    end
    -- if self.input_key_forward then
    --     sz = sz + 1
    -- end
    -- if self.input_key_backward then
    --     sz = sz - 1
    -- end

    if self.no_input_time > 0.25 and self.direction_correction then
        sx = correct_direction(self)
    end

    if math.abs(self.input_gas_pedal_value) > 0 then
        self.input_steering_wheel_value = sx
    end
    -- self.input_gas_pedal_value = sz
end

local function handle_merge(self, message)
    msg.post(self.getaway_control_script, "merge", {
        id = self.car_physics_id,
        other_id = message.other_id,

        car_data = self.car_data
    })

--     local other_car = cars.find_by_physics(message.other_id)
--     pprint(other_car)
-- 
--     msg.post(other_car.car_main, "kill")
--     msg.post("#", "kill")
end

local function handle_spawn(self)
    go.set_scale(1.25, self.visuals_url)
    go.animate(self.visuals_url, "scale", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_OUTBACK, 0.5, 0)
end

local function handle_kill(self)
    local c = self.car_data

    self.killed = true

    physics.set_maskbit(self.chassis_url, hash("killed_car"), true)
    physics.set_maskbit(self.chassis_url, hash("kill_zone"), false)
    physics.set_maskbit(self.chassis_url, physics.get_group(self.chassis_url), false)
    physics.set_group(self.chassis_url, hash("killed_car"))

    go.cancel_animations(self.visuals_url, "scale")
    go.animate(self.visuals_url, "scale", go.PLAYBACK_ONCE_FORWARD, 0.0001, go.EASING_OUTSINE, 0.05, 0, function (self)
        cars.delete(self.car_physics_id)
    end)

    -- self.stop_visuals = true
    fx.puff(c.car_position, self.car_visuals_id)
end

local function update_siren(self, dt)
    if not self.is_police then
        return
    end

    self.siren_timer = self.siren_timer + dt
    if self.siren_timer > 0.5 then
        self.siren_timer = 0
        self.siren_light_num = 1 - self.siren_light_num

        local mesh_left = msg.url(nil, self.car_visuals_siren_left_id, "mesh")
        local mesh_right = msg.url(nil, self.car_visuals_siren_right_id, "mesh")

        go.set(mesh_left, "tint.w", 0.5 + self.siren_light_num * 0.75)
        go.set(mesh_right, "tint.w", 0.5 + (1 - self.siren_light_num) * 0.75)
    end
end

local function init_car(self)
    level_state.car_count = level_state.car_count + 1

    self.physics_url = msg.url(nil, self.car_physics_id, nil)
    self.chassis_url = msg.url(nil, self.car_physics_id, self.car_physics_chassis_id)
    self.visuals_url = msg.url(nil, self.car_visuals_id, nil)

    local meshes = {
        msg.url(nil, self.car_visuals_body_id, self.car_visuals_body_mesh_id)
    }

    -- timer.delay(1, true, function (self)
    --     fx.puff(self.car_data.car_position + vmath.vector3(5, 0, 0))
    -- end)

    self.car_data = {
        car_mass = go.get(self.chassis_url, "mass"),
        car_first_frame = true,
        car_position = vmath.vector3(0),
        car_rotation = vmath.vector4(),
        car_euler = vmath.vector3(),
        car_previous_position = vmath.vector3(0),
        car_visual_position = vmath.vector3(0),
        car_velocity = vmath.vector3(0),
        car_direction = vmath.vector3(0),
        car_speed = 0,
    }

    self.wheel_touching = {}
    self.wheel_visual_pitch = {}
    self.wheel_visual_rotation_speed = {}
    self.wheel_visual_url = {}

    for wheel_id = 1, 4 do
        self.wheel_visual_url[wheel_id] = msg.url(nil, self["car_visuals_wheel" .. wheel_id .. "_id"], nil)
        table.insert(meshes, msg.url(nil, self["car_visuals_wheel" .. wheel_id .. "_id"], self.car_visuals_wheel_mesh_id))

        msg.post(self["car_physics_wheel" .. wheel_id .. "_id"], INIT, {
            wheel_id = wheel_id,
            chassis_url = self.chassis_url,
            car_mass = self.car_data.car_mass
        })
    end

    go.set(self.chassis_url, LINEAR_VELOCITY, self.start_velocity)

    if self.keyboard_input then
        msg.post(".", "acquire_input_focus")
    end

    self.siren_timer = 9999
    self.siren_light_num = 0
    self.dust_accum = 0
    self.no_input_time = 0

    handle_spawn(self)

    frustum_mesh.init(self, meshes)
end

function init(self)
    if self.async_init then
        msg.post("#", INIT)
    else
        init_car(self)
    end
end

function final(self)
    cars.unregister(self.car_physics_id)

    if not self.car_data then
        return
    end

    level_state.car_count = level_state.car_count - 1
    frustum_mesh.final(self)
end

function update(self, dt)
    if not self.car_data then
        return
    end
    local c = self.car_data

    --
    -- VISUAL POSITION, ETC.
    --
    local prev_position = c.car_position
    local car_position = go.get_position(self.physics_url)
    c.car_position = car_position
    c.car_visual_position = car_position -- vmath.lerp(dt * 30, c.car_visual_position, car_position)
    if c.car_first_frame then
        prev_position = car_position
        c.car_previous_position = prev_position
    end
    c.car_distance = vmath.length(car_position - prev_position)
    if vmath.length(car_position - prev_position) < 0.01 then
        prev_position = c.car_previous_position
    else
        c.car_previous_position = prev_position
    end
    c.car_direction = vmath.normalize(car_position - prev_position)

    if self.is_player then
        level_state.car_distance = level_state.car_distance + c.car_distance
    end

    local car_rotation = go.get_rotation(self.physics_url)
    c.car_rotation = car_rotation
    c.car_euler = go.get(self.physics_url, "euler")

    if not self.stop_visuals then
        go.set_rotation(c.car_rotation, self.visuals_url)
        go.set_position(c.car_visual_position, self.visuals_url)
    end

    update_siren(self, dt)

    --
    -- CONTROLS
    --
    if self.keyboard_input then
        process_input(self, dt)
    else
        if self.direction_correction then
            self.input_steering_wheel_value = correct_direction(self)
        end
    end

    local sz = math3d.clamp(self.input_gas_pedal_value, -1, 1)
    local sx = math3d.clamp(self.input_steering_wheel_value, -1, 1)

    if self.adaptive_cruise_control then
        local CLOSEST = { all = false }
        local raycast_groups = { hash("default") }
        local forward_dir = vmath.rotate(c.car_rotation, render3d.FORWARD) * 4
        local results = physics.raycast(c.car_position, c.car_position + forward_dir, raycast_groups, CLOSEST)
        if results ~= nil then
            for _, result in ipairs(results) do
                sz = 0
            end
        end
    end

    --
    -- CAR PHYSICS
    --
    c.car_velocity = go.get(self.chassis_url, LINEAR_VELOCITY)

    local cur_speed = vmath.length(c.car_velocity)
    local local_velocity = vmath.rotate(math3d.quat_inv(c.car_rotation), c.car_velocity)
    c.car_speed = -local_velocity.z

    if self.is_player then
        self.acceleration_boost = math3d.lerp(0.5, self.acceleration_boost, 0, dt)
        render3d.debug_log(string.format("BOOST %.03f", self.acceleration_boost))

        level_state.car_speed = c.car_speed
        level_state.car_boost = self.acceleration_boost
    end

    local acceleration_const = (self.acceleration_const + self.acceleration_boost) * c.car_mass
    local turn_speed1 = self.turn_speed1 * c.car_mass
    local turn_speed2 = self.turn_speed2 * c.car_mass

    local back_n_down = vmath.rotate(c.car_rotation, render3d.FORWARD) * self.acceleration_apply_point.z + vmath.rotate(c.car_rotation, render3d.UP) * self.acceleration_apply_point.y
    local debug_front = vmath.rotate(c.car_rotation, render3d.FORWARD) * 1.50

    --
    -- ACCELERATION
    --
    local desired_accel = vmath.rotate(c.car_rotation, render3d.FORWARD) * acceleration_const * sz
    local debug_accel_direction = vmath.rotate(c.car_rotation, render3d.FORWARD) * 3 * sz
    if self.wheel_touching[WHEEL_RL] or self.wheel_touching[WHEEL_RR] then
        msg.post(self.chassis_url, APPLY_FORCE, { force = desired_accel, position = c.car_position + back_n_down })
    end

    --
    -- TURNING
    --
    local turn_speed_on_car_speed = vmath.lerp(math3d.inverse_lerp(cur_speed, 0.1, 10), turn_speed1, turn_speed2)
    local desired_turn = render3d.RIGHT * turn_speed_on_car_speed * sx * math3d.sign(local_velocity.z)
    local debug_turn_dir = vmath.rotate(c.car_rotation, render3d.RIGHT) * 2 * sx
    if self.wheel_touching[1] or self.wheel_touching[2] then
        apply_torque(self.chassis_url, desired_turn)
    end

    local wheel_yaw = self.wheel_yaw or 0
    local max_wheel_yaw = vmath.lerp(math3d.inverse_lerp(cur_speed, 0.1, 50), 30, 4)
    wheel_yaw = vmath.lerp(0.2, wheel_yaw, -max_wheel_yaw * sx)
    go.set(self.wheel_visual_url[WHEEL_FL], EULER_Y, wheel_yaw)
    go.set(self.wheel_visual_url[WHEEL_FR], EULER_Y, wheel_yaw)
    self.wheel_yaw = wheel_yaw

    -- https://www.youtube.com/watch?v=LG1CtlFRmpU&t=171s
    local traction_const = self.traction_const
    if any_true(self.wheel_touching) then
        if math.abs(local_velocity.x) ~= 0 then
            local traction_force = vmath.rotate(c.car_rotation, render3d.RIGHT) * -local_velocity.x * traction_const
            msg.post(self.chassis_url, APPLY_FORCE, { force = traction_force, position = c.car_position })
        end

        go.set(self.chassis_url, LINEAR_DAMPING, 0.4)
        go.set(self.chassis_url, ANGULAR_DAMPING, 0.95)

        -- FX: dust
        self.dust_accum = self.dust_accum + dt
        local dust_dt = 0.8 / cur_speed
        if self.is_player then
            dust_dt = 0.4 / cur_speed
        end
        while self.dust_accum >= dust_dt do
            fx.road_dust(c.car_position + vmath.rotate(c.car_rotation, vmath.vector3((math.random() - 0.5) * 1.2, -0.5, -0.8)))
            self.dust_accum = self.dust_accum - dust_dt
        end
    else
        go.set(self.chassis_url, LINEAR_DAMPING, 0.1)
        go.set(self.chassis_url, ANGULAR_DAMPING, 0.1)
    end

    --
    -- WHEELS
    --
    for i, speed in pairs(self.wheel_visual_rotation_speed) do
        self.wheel_visual_rotation_speed[i] = vmath.lerp(0.2, speed, 0)
    end

    for i, touching in pairs(self.wheel_touching) do
        if touching then
            self.wheel_visual_rotation_speed[i] = c.car_speed
        end
    end

    for i, speed in pairs(self.wheel_visual_rotation_speed) do
        local w = -math.deg(speed / 0.25 * dt)
        if i == 1 then
            -- print(w)
        end
        self.wheel_visual_pitch[i] = ((self.wheel_visual_pitch[i] or 0) + w) % 360
        go.set(self.wheel_visual_url[i], EULER_X, self.wheel_visual_pitch[i])
    end

    --
    -- DEBUG
    --
    if self.debug_draw then
        msg.post("@render:", "draw_line", { start_point = c.car_position, end_point = c.car_position + debug_accel_direction, color = vmath.vector4(1, 0, 0, 1) } )
        msg.post("@render:", "draw_line", { start_point = c.car_position + debug_front, end_point = c.car_position + debug_front + debug_turn_dir, color = vmath.vector4(0, 1, 0, 1) } )
    end

    if self.debug_info then
        render3d.debug_log("Car speed " .. string.format("%.02f m/s, %.0f KMH", math.abs(c.car_speed), math.abs(c.car_speed) * 3.6))
    end

    c.car_first_frame = false

    --
    -- FRUSTUM CULL
    --
    frustum_mesh.update(self, c.car_position)
end

function on_message(self, message_id, message, sender)
    if message_id == SUSPENSION_UPDATE then
        local visual_url = self.wheel_visual_url[message.wheel_id]
        local pos = go.get(visual_url, POSITION_Y)
        go.set(visual_url, POSITION_Y, vmath.lerp(0.65, pos, message.wheel_pos))
        self.wheel_touching[message.wheel_id] = message.touching
    elseif message_id == INIT then
        init_car(self)
    elseif message_id == hash("merge_request") then
        if not self.can_merge then
            return
        end

        handle_merge(self, message)
    elseif message_id == hash("kill") then
        if self.killed then
            return
        end

        handle_kill(self)
    elseif message_id == hash("kill_zone") then
        if self.killed then
            return
        end

        handle_kill(self)
    end
end

function on_input(self, action_id, action)
    if not self.keyboard_input then
        return
    end

    -- if action_id == self.key_forward then
    --     self.input_key_forward = not action.released
    -- elseif action_id == self.key_backward then
    --     self.input_key_backward = not action.released
    -- else
    if action_id == self.key_left then
        self.input_key_left = not action.released
    elseif action_id == self.key_right then
        self.input_key_right = not action.released
    elseif action_id == self.key_left2 then
        self.input_key_left2 = not action.released
    elseif action_id == self.key_right2 then
        self.input_key_right2 = not action.released
    end
end
